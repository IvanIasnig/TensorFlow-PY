Praticamente il discorso è che Python è lento ad operare coi vettori (ricordarsi che ogni cosa è un vettore di 0 e 1)
Numpy esegue un ottimizzazione della vettorizzazione chiamata Broadcasting che di fatto elimina il loop per fare i calcoli

---------------------INTRO---------------------------

1. `shape`: Una tupla che rappresenta la forma dell'array, ovvero il numero di elementi lungo ogni dimensione.
2. `ndim`: Il numero di dimensioni dell'array.
3. `dtype`: Un oggetto `dtype` che descrive il tipo di dati degli elementi dell'array.
4. `size`: Il numero totale di elementi nell'array.
5. `itemsize`: La dimensione (in byte) di ciascun elemento dell'array.
6. `strides`: Una tupla di interi che indica il numero di byte da saltare nella memoria per passare al successivo elemento lungo ogni dimensione dell'array.

----------------------CREATING ARRAYS--------------------------

1. `pippo`: Questo array viene creato utilizzando la funzione `np.ones()`, che genera un array di "uno" con la stessa forma di `sample_array` (in questo caso, con 3 elementi). Il tipo di dati dell'array è specificato come `int64`. Il risultato è un array con i valori `[1, 1, 1]`.
2. `pluto`: Questo array viene creato utilizzando la funzione `np.zeros()`, che genera un array di "zero" con la forma specificata `(4, 5)`. Il tipo di dati dell'array è specificato come `int64`. Il risultato è un array 4x5 con tutti i valori uguali a 0.
3. `range_array`: Questo array viene creato utilizzando la funzione `np.arange()`, che genera un array di valori equidistanti nell'intervallo specificato. In questo caso, l'intervallo va da 10 (incluso) a 23 (escluso), con un passo di 4. Il risultato è un array con i valori `[10, 14, 18, 22]`.
4. `random_array`: Questo array viene creato utilizzando la funzione `np.random.randint()`, che genera un array di numeri interi casuali nell'intervallo specificato. In questo caso, l'intervallo va da 0 (incluso) a 10 (escluso), e la forma dell'array è `(3, 5)`. Il risultato è un array 3x5 con numeri interi casuali tra 0 e 9.
5. `random_array2`: Questo array viene creato utilizzando la funzione `np.random.random()`, che genera un array di numeri casuali tra 0 (incluso) e 1 (escluso) con la forma specificata `(3, 5)`. Il risultato è un array 3x5 con valori decimali casuali tra 0 e 1.
6. `random_array3`: Questo array viene creato utilizzando la funzione `np.random.rand()`, che genera un array di numeri casuali tra 0 (incluso) e 1 (escluso) con la forma specificata `(5, 3)`. A differenza di `np.random.random()`, questa funzione accetta direttamente le dimensioni dell'array come argomenti separati invece di una tupla. Il risultato è un array 5x3 con valori decimali casuali tra 0 e 1.